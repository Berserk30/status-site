stages:
- lint
- build
- test
- release

before_script:
- export DOTNET_TAG="$CI_BUILD_REF_NAME"

## LINT

cspell-docs:
  image: dbogatov/docker-images:cspell-latest
  stage: lint
  script:
  - ./build.sh -f test-docs-spell-ci
  tags:
  - docker

## BUILD

build-docs:
  image: dbogatov/docker-images:mk-docs-latest
  stage: build
  script:
  - ./build.sh -f build-docs
  artifacts:
    expire_in: 90 min
    paths:
    - documentation/out/
  tags:
  - docker

build-ping:
  image: golang:alpine
  stage: build
  script:
  - apk --update add bash
  - ./build.sh -f build-ping-server
  artifacts:
    expire_in: 90 min
    paths:
    - ping/bin/*
  tags:
  - docker

build-app:
  image: dbogatov/docker-images:net-core-latest
  stage: build
  script:
  - export ASPNETCORE_ENVIRONMENT="Production"
  - printf "{\"Version\":{\"GitHash\":\"%s\"}}" $CI_BUILD_REF > src/version.json
  - ./build.sh
  artifacts:
    expire_in: 90 min
    paths:
    - src/web/bin/
    - src/daemons/bin/
  tags:
  - docker

## TEST

unit-test-app:
  stage: test
  image: microsoft/dotnet:2.0.3-sdk
  dependencies: []
  script:
  - printf "{\"Version\":{\"GitHash\":\"%s\"}}" $CI_BUILD_REF > src/version.json
  - cd test
  - dotnet restore
  - dotnet build
  - ./test.sh | tee /dev/stderr | grep 'Test Run Successful.'
  tags:
  - docker

tidy-app:
  stage: test
  image: dbogatov/docker-images:net-core-latest
  dependencies:
  - build-app
  before_script:
  - export ASPNETCORE_ENVIRONMENT="Staging"
  - cd src/web/bin/release/netcoreapp2.0/publish/
  - dotnet web.dll > /dev/null &
  - sleep 15
  script:
  - curl -Ls http://localhost | tidy -e
  - curl -Ls http://localhost/home/metric/CpuLoad/the-source | tidy -e
  tags:
  - docker
  
blc-app:
  stage: test
  image: dbogatov/docker-images:net-core-latest
  dependencies:
  - build-app
  before_script:
  - export ASPNETCORE_ENVIRONMENT="Staging"
  - cd src/web/bin/release/netcoreapp2.0/publish/
  - dotnet web.dll > /dev/null &
  - sleep 15
  script:
  - blc --filter-level 3 --input http://localhost -rog --exclude "*linkedin.*" --exclude "*authenticate*" | tee /dev/stderr | grep 'Finished!' | tail -1 | grep '0 broken.'
  tags:
  - docker

blc-docs:
  stage: test
  image: dbogatov/docker-images:blc-latest
  dependencies:
  - build-docs
  before_script:
  - http-server documentation/out/ -p 80 > /dev/null &
  - sleep 5
  script:
  - blc --filter-level 3 --input http://localhost -rog --exclude "*linkedin.*" --exclude "*doxygen.*" --exclude "*status.dbogatov.org*" --exclude "*github.com*" --exclude "*git.dbogatov.org*" | tee /dev/stderr | grep 'Finished!' | tail -1 | grep '0 broken.'
  tags:
  - docker

## RELEASE

release-app-docs:
  stage: release
  dependencies:
  - build-app
  - build-docs
  - build-ping
  script:
  - ./build.sh -f build-docker-images
  - docker login -u $DOCKER_USER -p $DOCKER_PASS
  - ./build.sh -f push-docker-images
  - ./build.sh -f build-compose-files
  artifacts:
    paths:
    - docker-compose.yml
    - appsettings.production.yml
  tags:
  - shell

release-debian:
  stage: release
  image: dbogatov/docker-images:debian-latest
  script:
    - ./build.sh -f build-debian-package
  artifacts:
    paths:
      - debian/build/*
  tags:
  - docker
